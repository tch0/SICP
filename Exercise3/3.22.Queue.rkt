#lang sicp

(define (make-queue)
    (let ((front-ptr '())
          (rear-ptr '()))
        (define (empty-queue?) (null? front-ptr))
        (define (set-front-ptr! value) (set! front-ptr value))
        (define (set-rear-ptr! value) (set! rear-ptr value))
        (define (front-queue)
            (if (empty-queue?)
                (error "Call front-queue of a empty queue.")
                (car front-ptr)
            )
        )
        (define (insert-queue! value)
            (let ((new-pair (cons value '())))
                (cond ((empty-queue?) (set-front-ptr! new-pair)
                                      (set-rear-ptr! new-pair))
                      (else (set-cdr! rear-ptr new-pair)
                            (set-rear-ptr! new-pair))
                )
            )
        )
        (define (delete-queue!)
            (if (empty-queue?)
                (error "Delete front of a empty queue.")
                (set-front-ptr! (cdr front-ptr))
            )
        )
        (define (print-queue)
            (display "#queue (front ... rear) : ")
            (display front-ptr)
            (newline)
        )
        (define (dispatch m)
            (cond ((eq? m 'empty-queue?) (empty-queue?))
                  ((eq? m 'front-queue) (front-queue))
                  ((eq? m 'insert-queue!) insert-queue!)
                  ((eq? m 'delete-queue!) (delete-queue!))
                  ((eq? m 'print-queue) (print-queue))
                  (else (error "Unkown request to a queue, " m))
            )
        )
        dispatch
    )
)

; test
(define q (make-queue))
q
(q 'empty-queue?)
((q 'insert-queue!) 1)
((q 'insert-queue!) 2)
((q 'insert-queue!) 3)
((q 'insert-queue!) 4)
(q 'print-queue)
(q 'front-queue)
(q 'delete-queue!)
(q 'delete-queue!)
(q 'print-queue)
(q 'front-queue)