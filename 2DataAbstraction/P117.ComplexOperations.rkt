#lang sicp

; auxiliary functions
(define (square x) (* x x))

; complex numbers

; data with tags
(define (attach-tag type-tag contents)
    (cons type-tag contents)
)
(define (type-tag datum)
    (if (pair? datum)
        (car datum)
        (error "Bad tagged datum -- in function type-tag, " datum)
    )
)
(define (contents datum)
    (if (pair? datum)
        (cdr datum)
        (error "Bad tagged datum -- in function contents, " datum)
    )
)

; different complex data with tags
(define (rectangular? z)
    (eq? (type-tag z) 'rectangular)
)
(define (polar? z)
    (eq? (type-tag z) 'polar)
)

; two different implementations of representation of complex numbers
; x = r cosA
; y = r sinA
; r = sqrt(x^2 + y^2)
; A = arctan(y, x)

; represent as real and imaginary part
(define (make-from-real-imag-rectangular x y)
    (attach-tag 'rectangular (cons x y))
)
(define (make-from-mag-ang-rectangular r a)
    (make-from-real-imag-rectangular (* r (cos a)) (* r (sin a)))
)
(define (real-part-rectangular z) (car z)) ; input (contents tagged-complex)
(define (imag-part-rectangular z) (cdr z))
(define (magnitude-rectangular z)
    (sqrt (+ (square (real-part-rectangular z))
             (square (imag-part-rectangular z))))
)
(define (angle-rectangular z)
    (atan (imag-part-rectangular z)
          (real-part-rectangular z))
)
; represent as magnitude and angle
(define (make-from-real-imag-polar x y)
    (make-from-mag-ang-polar (sqrt (+ (square x) (square y)))
                             (atan y x))
)
(define (make-from-mag-ang-polar r a)
    (attach-tag 'polar (cons r a))
)
(define (real-part-polar z) (* (magnitude-polar z) (cos (angle-polar z)))) ; input (contents tagged-complex)
(define (imag-part-polar z) (* (magnitude-polar z) (sin (angle-polar z))))
(define (magnitude-polar z) (car z))
(define (angle-polar z) (cdr z))

; representation of complex numbers for users, a reasonable choice
(define (make-from-real-imag x y)
    (make-from-real-imag-rectangular x y)
)
(define (make-from-mag-ang r a)
    (make-from-mag-ang-polar r a)
)
(define (real-part z)
    (cond ((rectangular? z) (real-part-rectangular (contents z)))
          ((polar? z) (real-part-polar (contents z)))
          (else (error "unkown type -- in function real-part, " z))
    )
)
(define (imag-part z)
    (cond ((rectangular? z) (imag-part-rectangular (contents z)))
          ((polar? z) (imag-part-polar (contents z)))
          (else (error "unkown type -- in function imag-part, " z))
    )
)
(define (magnitude z)
    (cond ((rectangular? z) (magnitude-rectangular (contents z)))
          ((polar? z) (magnitude-polar (contents z)))
          (else (error "unkown type -- in function mangtitude, " z))
    )
)
(define (angle z)
    (cond ((rectangular? z) (angle-rectangular (contents z)))
          ((polar? z) (angle-polar (contents z)))
          (else (error "unkown type -- in function angle, " z))
    )
)

; operations: +-*/, constructed above the representation of complex numbers
(define (add-complex z1 z2)
    (make-from-real-imag (+ (real-part z1) (real-part z2))
                         (+ (imag-part z1) (imag-part z2)))
)
(define (sub-complex z1 z2)
    (make-from-real-imag (- (real-part z1) (real-part z2))
                         (- (imag-part z1) (imag-part z2)))
)
(define (mul-complex z1 z2)
    (make-from-mag-ang (* (magnitude z1) (magnitude z2))
                       (+ (angle z1) (angle z2)))
)
(define (div-complex z1 z2)
    (make-from-mag-ang (/ (magnitude z1) (magnitude z2))
                       (- (angle z1) (angle z2)))
)

; test
; (1+2i) * (2+3i) = (-4+7i)
(define PI 3.14159265358979323846)
(define test-res
    (mul-complex (make-from-real-imag 1 2)
                 (make-from-real-imag 2 3))
)
test-res
(real-part test-res)
(imag-part test-res)